<project name="picoded.JavaCommons" default="source" xmlns:jacoco="antlib:org.jacoco.ant">
	<property name="ant.build.javac.source" value="1.8"/>
	<property name="ant.build.javac.target" value="1.8"/>
	
	<property name='lib.dir' value='${basedir}/bin/lib' />
	
	<!-- Sets the property variables to point to respective directories -->
	<property name="junit-reports" value="${basedir}/test-files/junit-reports"/>
	<property name="junit-html" value="${basedir}/test-files/junit-html" />
	
	<property name="build-classes" value="${basedir}/bin/classes" />
	<property name="build-lib" value="${basedir}/bin/lib" />
	
	<property name="test-temp" value="${basedir}/test-files/tmp" />
	
	<property name="src-path" value="src/picoded" />
	<property name="src-test" value="src/picodedTests" />
	<property name="src-experimental" value="src/picodedX" />
	
	<!-- jUnit declearation over-ride, see: 'http://stackoverflow.com/questions/9774264/junit-ant-task-junittask-was-not-found' -->
	<path id="junit-path">
		<fileset dir="lib-organized/junit" includes="**/*.jar" />
	</path>
	<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
		<classpath refid="junit-path"/>
	</taskdef>
	
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath refid="junit-path"/>
    </taskdef>
    
	<!-- **************************************************
	The following lists the target sets supported by ant
	
	+ setup
	+ clean
	+ compile-lib
	+ compile-src
	+ compile-srcX
	+ compile-tests
	+ compile
	+ build
	+ src-beautify
	
	************************************************** -->
	
	<target name="setup">
		<mkdir dir=".git/hooks"/>
		<symlink link=".git/hooks/pre-commit" resource="./pre-commit.sh" failonerror="false"/>
	</target>
	
	
	<target name="clean">
		<delete dir="html-docs" failonerror="false"/>
		
		<delete dir="bin" failonerror="false"/>
		<mkdir dir="bin"/>
		<mkdir dir="bin/docs"/>
		
		<delete dir="test-files/tmp" failonerror="false"/>
		<mkdir dir="test-files/tmp"/>
	</target>
	
	<target name="compile-lib">
		<mkdir dir="bin"/>
		<copy todir="${build-lib}">
			<fileset dir="lib-organized" includes="*/*.jar"/>
			<cutdirsmapper dirs="1"/>
		</copy>
		<copy todir="${build-lib}">
			<fileset dir="lib-organized" includes="*/*/*.jar"/>
			<cutdirsmapper dirs="2"/>
		</copy>
	</target>
	
	<target name="compile-src" depends="compile-lib">
		<mkdir dir="${build-classes}"/>
		<path id="lib.path.ref">
			<fileset dir="${build-lib}" includes="**/*.jar" />
		</path>
		<javac destdir="${build-classes}" classpathref="lib.path.ref" debug="true" debuglevel="lines,source" 
				 includeantruntime="false" bootclasspath="./build-tools/rt-stubs/java-rt-jar-stubs-1.5.0.jar">
			<compilerarg value="-Xlint:all"/>
			<src path="${src-path}"/>
			<exclude name="**/package-info.java"/>
		</javac>
	</target>
	
	<target name="compile-srcX" depends="compile-lib">
		<mkdir dir="${build-classes}"/>
		<path id="lib.path.ref">
			<fileset dir="${build-lib}" includes="**/*.jar" />
		</path>
		<javac destdir="${build-classes}" classpathref="lib.path.ref" debug="true" debuglevel="lines,source" 
				 includeantruntime="false" bootclasspath="./build-tools/rt-stubs/java-rt-jar-stubs-1.5.0.jar">
			<compilerarg value="-Xlint:unchecked"/>
			<src path="${src-experimental}"/>
			<exclude name="**/package-info.java"/>
		</javac>
	</target>
	
	<target name="compile-tests" depends="compile-lib">
		<delete dir="test-files/tmp" failonerror="false"/>
		<mkdir dir="test-files/tmp"/>
		
		<mkdir dir="${build-classes}"/>
		<path id="lib.path.ref">
			<fileset dir="${build-lib}" includes="**/*.jar" />
		</path>
		<javac destdir="${build-classes}" classpathref="lib.path.ref" debug="true" debuglevel="lines,source" 
				 includeantruntime="false" bootclasspath="./build-tools/rt-stubs/java-rt-jar-stubs-1.5.0.jar">
			<compilerarg value="-Xlint:all"/>
			<src path="${src-path}"/>
			<src path="${src-test}"/>
			<exclude name="**/package-info.java"/>
		</javac>
	</target>
	
	<target name="build" depends="compile-src">
		<delete dir="bin/build" failonerror="false"/>
		<mkdir dir="bin/build"/>
		<jar destfile="bin/build/picodedJavaCommons-libsOnly.jar">
			<fileset dir="${build-classes}" includes="**/*.class" excludes="**/*_test.class"/>
			<fileset dir="${build-lib}" includes="*.jar" />
		</jar>
		<jar destfile="bin/build/picodedJavaCommons-withDependencies.jar">
			<fileset dir="${build-classes}" includes="**/*.class" excludes="**/*_test.class"/>
			<fileset dir="${build-lib}" includes="*.jar" />
		</jar>
		<jar destfile="bin/build/picodedJavaCommons.jar">
			<fileset dir="${build-classes}" includes="**/*.class" excludes="**/*_test.class"/>
		</jar>
	</target>
	
	<target name="javadoc" depends="compile-lib">
		<delete dir="bin/javadoc" failonerror="false"/>
		<mkdir dir="bin/javadoc"/>
		
		<path id="lib.path.ref">
			<fileset dir="${build-lib}" includes="**/*.jar" />
		</path>
		<javadoc destdir="bin/javadoc" classpathref="lib.path.ref" access="private" author="true" sourcepath="src" packagenames="picoded.*" use="true" version="true">
			<!--<fileset dir="${build-classes}" includes="**/*.class" excludes="**/*_test.class"/>-->
		</javadoc>
	</target>
	
	<!-- jUnit test report runner, used for continuous unit testing -->
	<target name="junit-all" depends="build,compile-tests">
		<mkdir dir="${junit-reports}"/>
		<!--
		<jacoco:coverage>
			<java classname="org.jacoco.examples.HelloJaCoCo" fork="true">
				<classpath>
					<pathelement location="./bin"/>
				</classpath>
			</java>
		</jacoco:coverage>
		-->
		<jacoco:coverage destfile="${junit-reports}/junit-all.exec">
			<junit printsummary="yes" haltonfailure="yes" fork="true" forkmode="once">
				<classpath>
					<pathelement path="${build-classes}"/>
					<pathelement path="${build-lib}"/>
					<fileset dir="${build-lib}" includes="**/*.jar" />
				</classpath>
			
				<formatter type="plain"/>
				<formatter type="xml"/>
				
				<!--
				<test name="picodedTests.all_test"
					haltonfailure="no" todir="${junit-reports}" outfile="junit-all">
					<formatter type="plain"/>
					<formatter type="xml"/>
				</test>
				 -->
				
				<batchtest haltonfailure="no" todir="${junit-reports}">
					
					<fileset dir="src">
						<include name="picodedTests/**/*_test.java"/>
					</fileset>
					
					<formatter type="plain"/>
					<formatter type="xml"/>
					
				</batchtest>
				
			</junit>
		</jacoco:coverage>
	</target>

	<!-- Code Beautifier, used for pre-commit hook -->
	<target name="src-beautify">
		
		<!-- Scan and beautify the code : spaces only -->
		<exec executable="java">
			<arg value="-cp"/>
			<arg value="./build-tools/java-formatter/java-formatter-with-dependencies.jar"/>
			<arg value="Formatter"/>
			<arg value="./build-config/code-format.opts"/>
			<arg value="./src"/>
		</exec>
		
	</target>
	
	<!-- convinent aliases -->
	<target name="compile" depends="compile-src">
	</target>
	
	<target name="source" depends="compile-src">
	</target>
	
</project>
