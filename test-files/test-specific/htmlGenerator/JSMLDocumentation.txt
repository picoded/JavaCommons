Documentation for JSON to HTML converter, or as I like to call it, the JSML engine.

--Simple Explanation--
This component takes in Json formatted input, and outputs an html formatted string.
It can also output the data in a pdf ready html format, for use with the flying-saucer library.

--Detailed Explanation--
The FormGenerator will do the templating and spit out the html string.
Create an instance of FormGenerator, and call applyTemplating.
Use the version of the function that accepts a String and Map as parameters, as it will do any conversion for you automatically.
I initially wrote the other 2 versions which take in FormNode, but you shouldn't have to use them, and I will eventually make those private.

For pdf output, call generatePDFReadyHtml on the FormGenerator instance.

The second parameter, the Map parameter, can be null. It represents any data that you want to use to "auto-fill" the page.
It is mainly used in generating the PDF output.

--Extending the functionality--
FormGenerator is designed to be extended. If there are specific html tag types which arent available, you can create your own!

This class uses Functional Interfaces, found in Java 8. 
Creating new functionality is as easy as creating an instance of FormInputInterface / FormWrapperInterface.
For example, 

private void FormInputInterface new_Input = (node)->{
	//do functionality here
	//node is an instance of FormNode
	
	//dont forget to return a string 
	
	return "This is the input string";
};

This will output the string "<div>This is the input string</div>".

Keep in mind that FormInputInterface returns a String, and FormWrapperInterface returns a string array of size 2.
YOU SHOULD NOT HAVE TO CREATE A CUSTOM WRAPPER! The default wrapper already returns your basic div tags,
which is enough for most things.

After that, just call addCustomFormInputTemplate or addCustomFormWrapperTemplate on the FormGenerator instance.
This function returns null if the mapping wasnt available previously, but will return the previous mapping if found, 
so do keep an eye out for that, and check for !null when calling them.

When calling the add functions, the first parameter is the key for "type" you use in the JSON mapping.