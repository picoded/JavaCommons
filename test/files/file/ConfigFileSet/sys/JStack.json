{
	///
	/// sys.JStack.stack
	///
	/// This represent the various data layers used in the system.
	/// Normally a caching layer will be placed first, followed by
	/// the actual implmentation layer.
	///
	/// The last layer will normally be the "single source of truth",
	/// for handling data accuracy resolution. (Normally JSql)
	///
	"stack" : [

		//--------------------------------------------------------------------------------
		//
		// Layer 0 : Micro-optimization, used to cache data fetch
		// requests locally within one session. Reducing DB hits
		//
		// This should be resetted when used inside the background maintenance thread
		// on each cycle to prevent cache staleing, within the maintenance thread.
		//
		// For a request session however, this is initiated uniquely per request. (never stale)
		//
		//--------------------------------------------------------------------------------
		{
			// Data stack type
			"type" : "JStruct",

			// Applicable structures
			//
			// Catches all
			"struct" : {
				"DataTable" : ["*"],
				"KeyValueMap" : ["*"],
				"AccountTable" : ["*"]
			},

			// Is automatically resetted as part of background task
			"background_resets" : true
		},

		//--------------------------------------------------------------------------------
		//
		// Layer 1 : in-ram caching, using either the local server
		// or a cluster of server. Maintains a cached copy of various data.
		//
		//--------------------------------------------------------------------------------
		{
			// Data stack type
			"type" : "JCache",
			
			// The data cache engine host (self host would mean localhost)
			"host" : "127.0.0.1",
			
			// The data cache engine
			"engine" : "hazelcast",
			
			// The cache engine tcp port
			"port" : "5701",
			
			// Alternative engines that can be used
			//
			// "engine" : "elasticsearch",
			// "engine" : "redis",

			// Embedded self hosting
			"selfhost" : true,

			// Applicable structures
			//
			// Catches all
			"struct" : {
				"DataTable" : ["*"],
				"KeyValueMap" : ["*"],
				"AccountTable" : ["*"]
			}
			
			// // Pulls from the single source of truth
			// // in the background to ensure data consistency.
			// // Use this for persistent local elasticsearch cache.
			// "renewal" : {
			// 	// The amount of data renewed at a time
			// 	"batch" : 5,
			// 
			// 	// System delay between requests in seconds
			// 	// Used to reduce down the overall DB load
			// 	"delay" : 1
			// }
		},

		//--------------------------------------------------------------------------------
		//
		// Layer 2 : The final layer of the JStack,
		//
		// This would be the "single source of truth"
		// for subsequent data layers above it
		//
		//--------------------------------------------------------------------------------
		{
			// Data stack type
			"type" : "JSql",

			// Applicable structures
			//
			// As this is the "single source of truth"
			// It catches all the respective structures
			"struct" : {
				"DataTable" : ["*"],
				"KeyValueMap" : ["*"],
				"AccountTable" : ["*"]
			},

			// // [Sqlite] database implmentation
			// // This is obviously not meant for production, but for testing,
			// // Path here refers to file path.
			// // Note that the database, username, password parameters are meaningless for sqlite
			// "engine" : "sqlite",
			// "path" : "./WEB-INF/storage/db.sqlite",

			// // [Oracle] database implmentation
			// // Note that as the database chosen is normally part of the pathing
			// // The database attribute is ignored.
			// "engine" : "oracle",
			// "path" : "JAVACOMMONS@//54.169.34.78:1521/xe",

			// // [MS-SQL] database implmentation
			// // Note that uselobs=false should be used, this is known to resolve
			// // Certain data competebility problems
			// "engine" : "mssql",
			// "path" : "54.169.34.78:1433;uselobs=false;",

			// [MY-SQL] database implmentation
			"engine" : "mysql",
			"path" : "54.169.34.78:3306",

			"database" : "JAVACOMMONS",
			"username" : "JAVACOMMONS",
			"password" : "JAVACOMMONS"
		}
	],

	/// Handles the various structure specific
	/// Configuration, such as restbuilder automated setup, etc.
	"struct" : {
		"DataTable" : {

		},
		"KeyValueMap" : {

		},
		"AccountTable" : {
			"account" : {
				
			}
		}
	},

	/// Initial setup thread config
	"setup" : {
		// Enable data structure setup checks
		"enabled" : true
	},

	/// Background maintenance thread config
	"background" : {
		// Enable data background renewal / maintenance
		"enabled" : true,

		// Maintenance thread check frequency in seconds
		"check_intevals" : 10,

		// Maintenance thread cycle timeout in seconds
		"timeout" : 86400 //or 1 day
	}
}
